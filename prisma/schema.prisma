// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  verifyPasscode        String?
  passcodeCreatedAt     DateTime?
  changePasswordToken   String?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  phone                 String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  files                 File[]
  createdPages          Page[]
  createdMenus          Menu[]
  createdMenuItems      MenuItem[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum FileType {
  IMAGE
  AUDIO
  VIDEO
}

model File {
  id           String            @id
  name         String
  type         FileType
  width        Int
  height       Int
  uploadedAt   DateTime          @default(now())
  blurDataUrl  String
  url          String
  desc         String
  userId       String
  author       User              @relation(fields: [userId], references: [id])
  usedByFooter FooterComponent[] @relation("usedFooterImages")
  usedByPages  Page[]            @relation("PageFiles")
}

enum FooterComponentEnum {
  PHOTO_GALLERY
  LINK_BOX
  HERO_BOX
}

model FooterComponent {
  id        String              @id @default(cuid())
  component FooterComponentEnum
  data      Json
  images    File[]              @relation("usedFooterImages")
}

model Page {
  id        String     @id @default(cuid())
  name      String
  slug      String     @unique
  data      String
  createdBy User?      @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  menuItems MenuItem[]
  files     File[]     @relation("PageFiles")
}

model MenuItem {
  id        String     @id @default(cuid())
  pageId    String
  page      Page       @relation(fields: [pageId], references: [id], onDelete: Cascade)
  menuId    String?
  menu      Menu?      @relation(fields: [menuId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    MenuItem?  @relation("MenuToMenu", fields: [parentId], references: [id])
  children  MenuItem[] @relation("MenuToMenu")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  creatorId String?
  createdBy User?      @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  order     Int
}

model Menu {
  id        String     @id @default(cuid())
  title     String
  items     MenuItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  creatorId String?
  createdBy User?      @relation(fields: [creatorId], references: [id], onDelete: SetNull)
}
